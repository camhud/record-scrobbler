# authenticates the user with Discogs using Oauth2

#TODO:
# Automate callback url pasting
# Turn into class for calling from other scripts
# Convert keys to hidden environmental variables for security

from urllib import parse, request
import discogs_client as dc
import webbrowser
import requests
import time
import keys
import pickle

# consumer key and consumer secret are application-specific strings
# generated by discogs
d_keys = keys.discogsKeys()
consumer_key = d_keys._consumer_key
consumer_secret = d_keys._consumer_secret

callback_url = "http://nickknudsen.photography/recordscrobbler/authorization"

# a unique identifier for this application, handed to discogs
user_agent = d_keys._user_agent

# instantiate client object and pass parameters
client = dc.Client(user_agent)
client.set_consumer_key(consumer_key, consumer_secret)

# pass consumer key and consumer secret to discogs via
# the token request URL. Returns request token and request token secret
token, secret, url = client.get_authorize_url(callback_url)

# open webpage for auth
webbrowser.open(url)
# for testing purposes only
redirect_url = input("Paste the redirect url here:\n")

# retrieve token and verifier
callback_url_qs = parse.urlparse(redirect_url)[4]
callback_dict = parse.parse_qs(callback_url_qs)
oauth_token = str(callback_dict['oauth_token'][0])
oauth_verifier = str(callback_dict['oauth_verifier'][0])

# use verifier to retrieve access token and secret
access_token, access_secret = client.get_access_token(oauth_verifier)
key_dict = {"access_token":access_token, "access_secret":access_secret}

# instantiate user object
user = client.identity()

# write keys to file
outfile = open("access_keys_{0}.txt".format(user.username), 'wb')
pickle.dump(key_dict, outfile)
outfile.close

# print("You are authenticated as {username}, AKA {name}".format(username=user.username, name=user.name))
